(function() {var implementors = {};
implementors["log"] = [{"text":"impl&lt;'a&gt; Unpin for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Unpin for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Unpin for Level","synthetic":true,"types":[]},{"text":"impl Unpin for LevelFilter","synthetic":true,"types":[]}];
implementors["riscv_decode"] = [{"text":"impl Unpin for Instruction","synthetic":true,"types":[]},{"text":"impl Unpin for DecodingError","synthetic":true,"types":[]},{"text":"impl Unpin for RType","synthetic":true,"types":[]},{"text":"impl Unpin for CsrType","synthetic":true,"types":[]},{"text":"impl Unpin for CsrIType","synthetic":true,"types":[]},{"text":"impl Unpin for IType","synthetic":true,"types":[]},{"text":"impl Unpin for SType","synthetic":true,"types":[]},{"text":"impl Unpin for BType","synthetic":true,"types":[]},{"text":"impl Unpin for UType","synthetic":true,"types":[]},{"text":"impl Unpin for JType","synthetic":true,"types":[]},{"text":"impl Unpin for FenceType","synthetic":true,"types":[]},{"text":"impl Unpin for ShiftType","synthetic":true,"types":[]},{"text":"impl Unpin for R4Type","synthetic":true,"types":[]}];
implementors["riscv_insn_decode"] = [{"text":"impl Unpin for Opcode","synthetic":true,"types":[]},{"text":"impl Unpin for InsnStatus","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["system_tracing"] = [{"text":"impl Unpin for ProbePlace","synthetic":true,"types":[]},{"text":"impl Unpin for ProbeType","synthetic":true,"types":[]}];
implementors["trapframe"] = [{"text":"impl Unpin for TrapFrame","synthetic":true,"types":[]},{"text":"impl Unpin for UserContext","synthetic":true,"types":[]},{"text":"impl Unpin for GeneralRegs","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()