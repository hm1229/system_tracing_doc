(function() {var implementors = {};
implementors["log"] = [{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]}];
implementors["riscv_decode"] = [{"text":"impl Send for Instruction","synthetic":true,"types":[]},{"text":"impl Send for DecodingError","synthetic":true,"types":[]},{"text":"impl Send for RType","synthetic":true,"types":[]},{"text":"impl Send for CsrType","synthetic":true,"types":[]},{"text":"impl Send for CsrIType","synthetic":true,"types":[]},{"text":"impl Send for IType","synthetic":true,"types":[]},{"text":"impl Send for SType","synthetic":true,"types":[]},{"text":"impl Send for BType","synthetic":true,"types":[]},{"text":"impl Send for UType","synthetic":true,"types":[]},{"text":"impl Send for JType","synthetic":true,"types":[]},{"text":"impl Send for FenceType","synthetic":true,"types":[]},{"text":"impl Send for ShiftType","synthetic":true,"types":[]},{"text":"impl Send for R4Type","synthetic":true,"types":[]}];
implementors["riscv_insn_decode"] = [{"text":"impl Send for Opcode","synthetic":true,"types":[]},{"text":"impl Send for InsnStatus","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Once&lt;T&gt;","synthetic":false,"types":[]}];
implementors["system_tracing"] = [{"text":"impl Send for ProbePlace","synthetic":true,"types":[]},{"text":"impl Send for ProbeType","synthetic":true,"types":[]}];
implementors["trapframe"] = [{"text":"impl Send for TrapFrame","synthetic":true,"types":[]},{"text":"impl Send for UserContext","synthetic":true,"types":[]},{"text":"impl Send for GeneralRegs","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()